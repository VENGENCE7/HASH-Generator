# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'HGui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import hashlib,binascii
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_TEXT_ENCRPYTER(object):
    def setupUi(self, TEXT_ENCRPYTER):
        TEXT_ENCRPYTER.setObjectName("TEXT_ENCRPYTER")
        TEXT_ENCRPYTER.resize(877, 676)
        font = QtGui.QFont()
        font.setFamily("Nimbus Roman No9 L")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        TEXT_ENCRPYTER.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons8-anonymous-mask-500.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        TEXT_ENCRPYTER.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(TEXT_ENCRPYTER)
        self.centralwidget.setObjectName("centralwidget")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(20, 20, 161, 51))
        self.label_5.setObjectName("label_5")
        self.SHA512 = QtWidgets.QRadioButton(self.centralwidget)
        self.SHA512.setGeometry(QtCore.QRect(720, 150, 141, 28))
        self.SHA512.setObjectName("SHA512")
        self.HASHES = QtWidgets.QButtonGroup(TEXT_ENCRPYTER)
        self.HASHES.setObjectName("HASHES")
        self.HASHES.addButton(self.SHA512,5)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(270, 110, 351, 24))
        self.label.setTextFormat(QtCore.Qt.AutoText)
        self.label.setObjectName("label")
        self.BLAKE2S = QtWidgets.QRadioButton(self.centralwidget)
        self.BLAKE2S.setEnabled(True)
        self.BLAKE2S.setGeometry(QtCore.QRect(550, 200, 141, 28))
        self.BLAKE2S.setObjectName("BLAKE2S")
        self.HASHES.addButton(self.BLAKE2S,9)
        self.SHA1 = QtWidgets.QRadioButton(self.centralwidget)
        self.SHA1.setGeometry(QtCore.QRect(50, 150, 131, 28))
        self.SHA1.setObjectName("SHA1")
        self.HASHES.addButton(self.SHA1,1)
        self.geng = QtWidgets.QPushButton(self.centralwidget,clicked=lambda:self.generate())
        self.geng.setGeometry(QtCore.QRect(30, 260, 221, 141))
        font = QtGui.QFont()
        font.setFamily("Sans")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.geng.setFont(font)
        self.geng.setObjectName("geng")
        self.MD5 = QtWidgets.QRadioButton(self.centralwidget)
        self.MD5.setGeometry(QtCore.QRect(720, 200, 131, 28))
        self.MD5.setObjectName("MD5")
        self.HASHES.addButton(self.MD5,10)
        self.SHA256 = QtWidgets.QRadioButton(self.centralwidget)
        self.SHA256.setGeometry(QtCore.QRect(380, 150, 131, 28))
        self.SHA256.setObjectName("SHA256")
        self.HASHES.addButton(self.SHA256,3)
        self.SHA224 = QtWidgets.QRadioButton(self.centralwidget)
        self.SHA224.setGeometry(QtCore.QRect(230, 150, 131, 28))
        self.SHA224.setObjectName("SHA224")
        self.HASHES.addButton(self.SHA224,2)
        self.SHA384 = QtWidgets.QRadioButton(self.centralwidget)
        self.SHA384.setGeometry(QtCore.QRect(550, 150, 141, 28))
        self.SHA384.setObjectName("SHA384")
        self.HASHES.addButton(self.SHA384,4)
        self.inputdata = QtWidgets.QTextEdit(self.centralwidget)
        self.inputdata.setGeometry(QtCore.QRect(190, 20, 661, 75))
        self.inputdata.setObjectName("inputdata")
        self.CB_hl = QtWidgets.QCheckBox(self.centralwidget,clicked=lambda:self.length())
        self.CB_hl.setGeometry(QtCore.QRect(30, 490, 221, 28))
        self.CB_hl.setObjectName("CB_hl")
        self.CB_hl.setEnabled(False)
        self.it = QtWidgets.QLineEdit(self.centralwidget)
        self.it.setEnabled(False)
        self.it.setGeometry(QtCore.QRect(590, 550, 251, 38))
        self.it.setObjectName("it")
        self.it.setText('1')
        self.it.setValidator(QtGui.QIntValidator(1, 1000000))
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setEnabled(False)
        self.label_6.setGeometry(QtCore.QRect(350, 620, 221, 24))
        self.label_6.setObjectName("label_6")
        self.CB_salt = QtWidgets.QCheckBox(self.centralwidget,clicked=lambda:self.salting())
        self.CB_salt.setGeometry(QtCore.QRect(60, 450, 145, 28))
        self.CB_salt.setObjectName("CB_salt")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setEnabled(False)
        self.label_7.setGeometry(QtCore.QRect(270, 550, 321, 24))
        self.label_7.setObjectName("label_7")
        self.hl = QtWidgets.QLineEdit(self.centralwidget)
        self.hl.setEnabled(False)
        self.hl.setGeometry(QtCore.QRect(590, 610, 241, 41))
        self.hl.setObjectName("hl")
        self.hl.setText("1")
        self.hl.setValidator(QtGui.QIntValidator(1, 1000000))
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setEnabled(False)
        self.label_8.setGeometry(QtCore.QRect(280, 460, 251, 24))
        self.label_8.setObjectName("label_8")
        self.salt = QtWidgets.QLineEdit(self.centralwidget)
        self.salt.setEnabled(False)
        self.salt.setGeometry(QtCore.QRect(270, 490, 581, 39))
        self.salt.setObjectName("salt")
        self.hashedata = QtWidgets.QTextEdit(self.centralwidget)
        self.hashedata.setGeometry(QtCore.QRect(270, 260, 581, 181))
        self.hashedata.setObjectName("hashedata")
        self.BLAKE2B = QtWidgets.QRadioButton(self.centralwidget)
        self.BLAKE2B.setGeometry(QtCore.QRect(380, 200, 163, 32))
        self.BLAKE2B.setObjectName("BLAKE2B")
        self.HASHES.addButton(self.BLAKE2B,8)
        self.SHA3_512 = QtWidgets.QRadioButton(self.centralwidget)
        self.SHA3_512.setGeometry(QtCore.QRect(230, 200, 131, 32))
        self.SHA3_512.setObjectName("SHA3_512")
        self.HASHES.addButton(self.SHA3_512,7)
        self.SHA3_256 = QtWidgets.QRadioButton(self.centralwidget)
        self.SHA3_256.setGeometry(QtCore.QRect(50, 200, 161, 32))
        self.SHA3_256.setObjectName("SHA3_256")
        self.HASHES.addButton(self.SHA3_256,6)
        self.EXIT = QtWidgets.QPushButton(self.centralwidget,clicked=lambda:exit())
        self.EXIT.setGeometry(QtCore.QRect(40, 560, 181, 91))
        self.EXIT.setObjectName("EXIT")
        TEXT_ENCRPYTER.setCentralWidget(self.centralwidget)

        self.retranslateUi(TEXT_ENCRPYTER)
        QtCore.QMetaObject.connectSlotsByName(TEXT_ENCRPYTER)

    def retranslateUi(self, TEXT_ENCRPYTER):
        _translate = QtCore.QCoreApplication.translate
        TEXT_ENCRPYTER.setWindowTitle(_translate("TEXT_ENCRPYTER", "TEXT ENCRPYTER"))
        self.label_5.setText(_translate("TEXT_ENCRPYTER", "ENTER TEXT :"))
        self.SHA512.setText(_translate("TEXT_ENCRPYTER", "SHA512"))
        self.label.setText(_translate("TEXT_ENCRPYTER", "-----> HASHES AVAILABLE <-----"))
        self.BLAKE2S.setText(_translate("TEXT_ENCRPYTER", "BLAKE2S"))
        self.SHA1.setText(_translate("TEXT_ENCRPYTER", "SHA1"))
        self.geng.setText(_translate("TEXT_ENCRPYTER", "GENERATE"))
        self.MD5.setText(_translate("TEXT_ENCRPYTER", "MD5"))
        self.SHA256.setText(_translate("TEXT_ENCRPYTER", "SHA256"))
        self.SHA224.setText(_translate("TEXT_ENCRPYTER", "SHA224"))
        self.SHA384.setText(_translate("TEXT_ENCRPYTER", "SHA384"))
        self.CB_hl.setText(_translate("TEXT_ENCRPYTER", "Limit HASH Length"))
        self.label_6.setText(_translate("TEXT_ENCRPYTER", "Enter Length u need:"))
        self.CB_salt.setText(_translate("TEXT_ENCRPYTER", "ADD SALT"))
        self.label_7.setText(_translate("TEXT_ENCRPYTER", "Enter Number Of Iterations :"))
        self.label_8.setText(_translate("TEXT_ENCRPYTER", "Enter text for SALTING: "))
        self.BLAKE2B.setText(_translate("TEXT_ENCRPYTER", "BLAKE2B"))
        self.SHA3_512.setText(_translate("TEXT_ENCRPYTER", "SHA3_512"))
        self.SHA3_256.setText(_translate("TEXT_ENCRPYTER", "SHA3_256"))
        self.EXIT.setText(_translate("TEXT_ENCRPYTER", "EXIT"))

    def exit():
        sys.exit(app.exec_())
    

    def salting(self):
        if self.CB_salt.isChecked()==True:
            self.SHA3_256.hide()
            self.SHA3_512.hide()
            self.BLAKE2B.hide()
            self.BLAKE2S.hide()
            self.label_8.setEnabled(True)
            self.salt.setEnabled(True)
            self.label_7.setEnabled(True)
            self.it.setEnabled(True)
            self.CB_hl.setEnabled(True)
        else:
            self.SHA3_256.show()
            self.SHA3_512.show()
            self.BLAKE2B.show()
            self.BLAKE2S.show() 
            self.label_8.setEnabled(False)
            self.salt.setEnabled(False)
            self.label_7.setEnabled(False)
            self.it.setEnabled(False)
            self.CB_hl.setEnabled(False)
        
    def length(self):
        if self.CB_hl.isChecked()==True:    
            self.label_6.setEnabled(True)
            self.hl.setEnabled(True)
        else:
            self.label_6.setEnabled(False)
            self.hl.setEnabled(False)

    '''BUTOON FUNCTION'''
    def generate(self):

        S=self.inputdata.toPlainText()
        print(S)      #input data      
        H=self.HASHES.checkedId()
        '''HASH FUNCTIONS'''
        if(H==10):
            md5=hashlib.md5()#md5 object
            if self.CB_salt.isChecked()==False:
                md5.update(S.encode())
                self.hashedata.setText(md5.hexdigest())
            elif self.CB_salt.isChecked()==True:
                IT=int(self.it.text())
                SALT=self.salt.text()
                BSALT= bytes(SALT,'ascii') #converting into bytes with ascii encoding
                HL=self.hl.text()
                x=hashlib.pbkdf2_hmac('md5',S.encode(),BSALT,IT)
                self.hashedata.setText('->Byte form :\t'+str(binascii.hexlify(x))+"\n->ASCII form :\t"+ascii(x))
                #printing encrypted data with iterations and salt
            if self.CB_hl.isChecked():
                HL=int(HL)
                y=hashlib.pbkdf2_hmac('md5',S.encode(),BSALT,IT,HL)
                self.hashedata.setText('->Byte form :\t'+str(binascii.hexlify(y))+"\n->ASCII form :\t"+ascii(y))
        
        if(H==9):
            blake2s=hashlib.blake2s()#blake2s object
            if self.CB_salt.isChecked()==False:
                blake2s.update(S.encode())
                self.hashedata.setText(blake2s.hexdigest())
        
        if(H==8):   
            blake2b=hashlib.blake2b()#blake2b object
            if self.CB_salt.isChecked()==False:
                blake2b.update(S.encode())
                self.hashedata.setText(blake2b.hexdigest())    
          
        if(H==7):
            sha3_512=hashlib.sha3_512()#sha3_512 object
            if self.CB_salt.isChecked()==False:
                sha3_512.update(S.encode())
                self.hashedata.setText(sha3_512.hexdigest())
        
        if(H==6):
            sha3_256=hashlib.sha3_256()#sha3_256 object
            if self.CB_salt.isChecked()==False:
                sha3_256.update(S.encode())
                self.hashedata.setText(sha3_256.hexdigest())  

        if(H==1):         
            sha1 = hashlib.sha1()#sha1 object
            if self.CB_salt.isChecked()==False:
                sha1.update(S.encode())
                self.hashedata.setText(sha1.hexdigest())

            elif self.CB_salt.isChecked()==True:
                IT=int(self.it.text())
                SALT=self.salt.text()
                BSALT= bytes(SALT,'ascii') #converting into bytes with ascii encoding
                HL=self.hl.text()

                x=hashlib.pbkdf2_hmac('sha1',S.encode(),BSALT,IT)
                self.hashedata.setText('->Byte form :\t'+str(binascii.hexlify(x))+"\n->ASCII form :\t"+ascii(x)) 
                if self.CB_hl.isChecked():
                    HL=int(HL)
                    y=hashlib.pbkdf2_hmac('sha1',S.encode(),BSALT,IT,HL)
                    self.hashedata.setText('->Byte form :\t'+str(binascii.hexlify(y))+"\n->ASCII form :\t"+ascii(y)) 

        if(H==2):
            sha224 = hashlib.sha224()#sha224 object
            if self.CB_salt.isChecked()==False:    
                sha224.update(S.encode())
                self.hashedata.setText(sha224.hexdigest())   
            elif self.CB_salt.isChecked()==True:
                IT=int(self.it.text())
                SALT=self.salt.text()
                BSALT= bytes(SALT,'ascii') #converting into bytes with ascii encoding
                HL=self.hl.text()

                x=hashlib.pbkdf2_hmac('sha224',S.encode(),BSALT,IT)
                self.hashedata.setText('->Byte form :\t'+str(binascii.hexlify(x))+"\n->ASCII form :\t"+ascii(x))  
                if self.CB_hl.isChecked():
                    HL=int(HL)
                    y=hashlib.pbkdf2_hmac('sha224',S.encode(),BSALT,IT,HL)
                    self.hashedata.setText('->Byte form :\t'+str(binascii.hexlify(y))+"\n->ASCII form :\t"+ascii(y))

        if(H==3):
            sha256 = hashlib.sha256()#sha256 object
            if self.CB_salt.isChecked()==False:    
                sha256.update(S.encode())
                self.hashedata.setText(sha256.hexdigest()) 
            elif self.CB_salt.isChecked()==True:
                IT=int(self.it.text())
                SALT=self.salt.text()
                BSALT= bytes(SALT,'ascii') #converting into bytes with ascii encoding
                HL=self.hl.text()

                x=hashlib.pbkdf2_hmac('sha256',S.encode(),BSALT,IT)
                self.hashedata.setText('->Byte form :\t'+str(binascii.hexlify(x))+"\n->ASCII form :\t"+ascii(x))
                if self.CB_hl.isChecked():
                    HL=int(HL)
                    y=hashlib.pbkdf2_hmac('sha256',S.encode(),BSALT,IT,HL)
                    self.hashedata.setText('->Byte form :\t'+str(binascii.hexlify(y))+"\n->ASCII form :\t"+ascii(y))

        if(H==4):
            sha384 = hashlib.sha384()#sha384 object 
            if self.CB_salt.isChecked()==False:    
                sha384.update(S.encode())
                self.hashedata.setText(sha384.hexdigest())
            elif self.CB_salt.isChecked()==True:
                IT=int(self.it.text())
                SALT=self.salt.text()
                BSALT= bytes(SALT,'ascii') #converting into bytes with ascii encoding
                HL=self.hl.text()

                x=hashlib.pbkdf2_hmac('sha384',S.encode(),BSALT,IT)
                self.hashedata.setText('->Byte form :\t'+str(binascii.hexlify(x))+"\n->ASCII form :\t"+ascii(x))
                if self.CB_hl.isChecked():
                    HL=int(HL)
                    y=hashlib.pbkdf2_hmac('sha384',S.encode(),BSALT,IT,HL)
                    self.hashedata.setText('->Byte form :\t'+str(binascii.hexlify(y))+"\n->ASCII form :\t"+ascii(y))
         
        if(H==5):
            sha512 = hashlib.sha512()#sha512 object
            if self.CB_salt.isChecked()==False:    
                sha512.update(S.encode())
                self.hashedata.setText(sha512.hexdigest()) 
            elif self.CB_salt.isChecked()==True:
                IT=int(self.it.text())
                SALT=self.salt.text()
                BSALT= bytes(SALT,'ascii') #converting into bytes with ascii encoding
                HL=self.hl.text()

                x=hashlib.pbkdf2_hmac('sha512',S.encode(),BSALT,IT)
                self.hashedata.setText('->Byte form :\t'+str(binascii.hexlify(x))+"\n->ASCII form :\t"+ascii(x)) 
                if self.CB_hl.isChecked():
                    HL=int(HL)
                    y=hashlib.pbkdf2_hmac('sha512',S.encode(),BSALT,IT,HL)
                    self.hashedata.setText('->Byte form :\t'+str(binascii.hexlify(y))+"\n->ASCII form :\t"+ascii(y))   


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    TEXT_ENCRPYTER = QtWidgets.QMainWindow()
    ui = Ui_TEXT_ENCRPYTER()
    ui.setupUi(TEXT_ENCRPYTER)
    TEXT_ENCRPYTER.show()
    sys.exit(app.exec_())
